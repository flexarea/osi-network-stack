//good frame
	//ip packet encapsulated in ethernet frame (82 bytes)
	uint8_t frame[1600] = {
		0x12,0x9f,0x41,0x0d,0x0e,0x63, //destination address
		//0xff,0xff,0xff,0xff,0xff,0xff, //broadcasating
		0x12,0x9f,0x41,0x0d,0x0e,0x64, //source address
		0x08,0x00,                     //type (IP)
									   //----------IP
		0x45,                          //version and IHL
		0x00,                          //type of service
		0x00,0x44,                     //total length
		0x00,0x01,                     //identification
		0x00,0x00,                     //Flags and Fragment Offset
		0x04,0xFF,                     //TTL and Protocol (0x01 for ICMP)
		0x00,0x00,					   //4 bytes Header Checksum here
		0x01,0x02,0x02,0x05,            //Source address
		0x01,0x03,0x04,0x04,            //Destination address

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	};


// ARP request encapsulated in ethernet frame (60 bytes)
uint8_t frame[1600] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // Destination (broadcast)
    0x12, 0x9f, 0x41, 0x0d, 0x0e, 0x64, // Source MAC
    0x08, 0x06,                         // Type (ARP = 0x0806)

    // ARP Packet (28 bytes)
    0x00, 0x01,                         // Hardware type (Ethernet = 1)
    0x08, 0x00,                         // Protocol type (IPv4 = 0x0800)
    0x06,                               // Hardware address length (MAC = 6 bytes)
    0x04,                               // Protocol address length (IPv4 = 4 bytes)
    0x00, 0x01,                         // Operation (request = 1)
    0x12, 0x9f, 0x41, 0x0d, 0x0e, 0x64, //Sender hardware address
    0x01, 0x02, 0x02, 0x05,				//Sender protocol address
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //Target hardware
    0x01, 0x02, 0x01, 0x01             //Target protocol address

	//padding here (18 bytes)
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	//FCS
};
